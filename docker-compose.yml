

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
    ports:
      - "3307:3306"
    volumes:
      - ./Backend/DataBases/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    networks:
      - auth-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "Admin123!"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
      - ./Backend/DataBases/SQLServer/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - auth-net
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Admin123!", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  postgres-adminproducts:
    build: ./Backend/Databases/PostgreSQL
    container_name: postgres-adminproducts
    restart: always
    ports:
      - "5433:5432"  # evita conflicto si el puerto 5432 ya est√° ocupado
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: adminproductsdb
    networks:
      - auth-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5






  getuser-service:
    build:
      context: ./Backend/Domain/Users/GetUser
    container_name: getuser
    ports:
      - "3002:3002"
    depends_on:
      - mysql
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=1234
      - DB_NAME=usersdb
      - DB_PORT=3306
      - PORT=3002
    networks:
      - auth-net

  updateuser-service:
    build:
      context: ./Backend/Domain/Users/UpdateUser
    container_name: updateuser
    ports:
      - "3003:3003"
    depends_on:
      - mysql
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=1234
      - DB_NAME=usersdb
      - DB_PORT=3306
      - PORT=3003
    networks:
      - auth-net

  deleteuser-service:
    build:
      context: ./Backend/Domain/Users/DeleteUser
    container_name: deleteuser
    ports:
      - "3004:3004"
    depends_on:
      - mysql
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=1234
      - DB_NAME=usersdb
      - DB_PORT=3306
      - PORT=3004
    networks:
      - auth-net

  userauthjwt-service:
    build:
      context: ./Backend/Domain/Users/UserAuthentication
    container_name: userauthjwt
    ports:
      - "3005:3005"
    depends_on:
      - mysql
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=1234
      - DB_NAME=usersdb
      - DB_PORT=3306
      - PORT=3005
      - JWT_SECRET=supersecretkey
    networks:
      - auth-net

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - auth-net

  usernotification-service:
    build:
      context: ./Backend/Domain/Users/UserNotification
    container_name: usernotification
    ports:
      - "3006:3006"
    depends_on:
      - redis
    environment:
      - PORT=3006
      - REDIS_URL=redis://redis:6379
    networks:
      - auth-net

  create-item-service:
    build:
      context: ./Backend/Domain/InventoryServices/CreateItem
    container_name: create-item-service
    ports:
      - "8081:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=inventorydb
      - DB_USER=root
      - DB_PASSWORD=1234
    networks:
      - auth-net

  update-item-service:
    build:
      context: ./Backend/Domain/InventoryServices/UpdateItem
    container_name: update-item-service
    ports:
      - "8082:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=inventorydb
      - DB_USER=root
      - DB_PASSWORD=1234
    networks:
      - auth-net

  delete-item-service:
    build:
      context: ./Backend/Domain/InventoryServices/DeleteItem
    container_name: delete-item-service
    ports:
      - "8084:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=inventorydb
      - DB_USER=root
      - DB_PASSWORD=1234
    networks:
      - auth-net
    
  get-item-service:
    build:
      context: ./Backend/Domain/InventoryServices/GetItem
    container_name: get-item-service
    ports:
      - "8083:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=inventorydb
      - DB_USER=root
      - DB_PASSWORD=1234
    networks:
      - auth-net
     
  check-availability-service:
    build:
      context: ./Backend/Domain/InventoryServices/CheckAvailability
    container_name: check-availability-service
    ports:
      - "8085:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=inventorydb
      - DB_USER=root
      - DB_PASSWORD=1234
    networks:
      - auth-net

  mongo:
    image: mongo:5
    container_name: notary-mongo
    ports:
      - "27017:27017"
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
      - ./Backend/DataBases/Mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - auth-net

  usersettings-service:
    build:
      context: ./Backend/Domain/Users/UserSettings
    container_name: usersettings-service
    ports:
      - "3009:3009"
    depends_on:
      - mongo
    environment:
      - PORT=3009
      - MONGO_URI=mongodb://notary-mongo:27017/usersettingsdb
    networks:
      - auth-net

  item-image-service:
    build:
      context: ./Backend/Domain/InventoryServices/ItemImage
    container_name: item-image-service
    ports:
      - "8087:8080"
    depends_on:
      - mongo
    environment:
      - PORT=8080
      - MONGO_URI=mongodb://notary-mongo:27017/itemimagesdb
    networks:
      - auth-net

  frontend:
    build:
      context: ./Frontend
    container_name: frontend
    ports:
      - "8080:80"
    depends_on:
      - userauthjwt-service
    networks:
      - auth-net

  create-booking-service:
    build:
      context: ./Backend/Domain/BookingQuotation/CreateBooking
    container_name: create-booking-service
    ports:
      - "8086:8080"
    depends_on:
      - sqlserver
    environment:
      - PORT=8080
      - DB_HOST=sqlserver
      - DB_PORT=1433
      - DB_NAME=bookingdb
      - DB_USER=sa
      - DB_PASSWORD=Admin123!
    networks:
      - auth-net

  update-booking-service:
    build:
      context: ./Backend/Domain/BookingQuotation/UpdateBooking
    container_name: update-booking-service
    ports:
      - "8088:8080"
    depends_on:
      - sqlserver  
    environment:
      - PORT=8080
      - DB_HOST=sqlserver
      - DB_PORT=1433
      - DB_NAME=bookingdb
      - DB_USER=sa
      - DB_PASSWORD=Admin123!
    networks:
      - auth-net

  delete-booking-service:
    build:
      context: ./Backend/Domain/BookingQuotation/DeleteBooking
    container_name: delete-booking-service
    ports:
      - "8089:8080"
    depends_on:
      - sqlserver

    environment:
      - PORT=8080
      - DB_HOST=sqlserver
      - DB_PORT=1433
      - DB_NAME=bookingdb
      - DB_USER=sa
      - DB_PASSWORD=Admin123!
    networks:
      - auth-net


  get-booking-service:
    container_name: get-booking-service       
    build:
      context: ./Backend/Domain/BookingQuotation/GetBooking
    ports:
      - "8090:8080"
    environment:
      - PORT=8080
      - SQLSERVER_CONN=sqlserver://sa:Admin123!@sqlserver:1433?database=bookingdb
    depends_on:
      - sqlserver
    networks:
      - auth-net

  quotation-service:
    build:
      context: ./Backend/Domain/BookingQuotation/Quotation
    ports:
      - "8091:8080"
    environment:
      - PORT=8080
      - SQLSERVER_CONN=sqlserver://sa:Admin123!@sqlserver:1433?database=bookingdb
    depends_on:
      - sqlserver
    networks:
      - auth-net
        
  booking-notification-service:
    build:
      context: ./Backend/Domain/BookingQuotation/BookingNotification
    container_name: booking-notification-service
    ports:
      - "8092:8092"
    depends_on:
      - mongo
    environment:
      - PORT=8092
      - MONGO_URI=mongodb://notary-mongo:27017/notificationdb
    networks:
      - auth-net

  create-product-service:
    build: ./Backend/Domain/Administrator/CreateProduct
    container_name: create-product-service
    ports:
      - "8093:8093"
    depends_on:
      postgres-adminproducts:
        condition: service_healthy
    environment:
      - PORT=8093
      - POSTGRES_HOST=postgres-adminproducts
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adminproductsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin123
    networks:
      - auth-net
    
  delete-product-service:
      build: ./Backend/Domain/Administrator/DeleteProduct
      container_name: delete-product-service
      ports:
      - "8094:8094"
      depends_on:
       postgres-adminproducts:
        condition: service_healthy
      environment:
      - PORT=8094
      - POSTGRES_HOST=postgres-adminproducts
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adminproductsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin123
      networks:
      - auth-net



volumes:
  mysql_data:
  mongo-data:
  sqlserver-data:

networks:
  auth-net:
    driver: bridge
